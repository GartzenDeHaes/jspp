class Life2 
{
	private static var wantedTime = 1000;
	private static var light_benchmarks = {2549,2724,3011,2985,3153,3056,2442,793,219,90.5}; // compared to C results
	private static var heavy_benchmarks = {2536,2719,2996,1430,1047,716,402,88.2,21.0,8.36}; // compared to C results
	private static var benchmarks = new Vector();
	private static var useBenchmark = true;

	private static var java_bmark_list = "";
	private static var rateFactor = 0;
	private static var rerunMainLoopCount = 5; // has to be at least 3
	private var show_table = false;
	private static var lightLoad = true;
	private static var use_Sizes = {5,6,8,10,15,25,50,250,1000,2500};

	private var max_x;
	private var max_y;
	private var board;
	private var LiveVal = 16;
	private var cell_live_set = (1<<3) | 1<<(3+LiveVal) | 1<<(2+LiveVal);
	private var rowOne;
	private var rowZero;
	private var topRow;
	private var midRow;
	private var botRow;
	private var rowUsage;

	private sortArray(array) 
	{
		if (array.length(0) < 2)
		{
			return;
		}
		var changed = true;
		while (changed) 
		{
			changed = false;
			for (var c=1; c < array.length(0); c++) 
			{
				if (array[c-1] > array[c]) 
				{
					changed = true;
					var tmp = array[c];
					array[c] = array[c-1];
					array[c-1] = tmp;
				}
			}
		}
	}

	private pretty_number(num) 
	{
		var cutoff = 120;
		if (num > cutoff) { return ""+num; }
		if (num < 0.001) { return "0"; }
		var fac = 1.0;
		while (num < cutoff) 
		{
			num *= 10.0;
			fac *= 10.0;
		}
		var tt = Object::parseInt(num);
		num = tt / fac;
		return ""+num;
	}

	public set_line(y, alive) 
	{
		for (var c=1; c<=alive.length(); c++) 
		{
			board[y,c] = alive[c-1];
		}
		board[y,0] = alive.length();
	}

	public set_line(y, row, a) 
	{
		var live_count = 0;
		for (var c=0; c<row.length(a); c++) 
		{
			if (row[a,c]) { live_count ++; }
		}

		board[y,0] = live_count;
		live_count = 1;
		for (var c=0; c<row.length(a); c++) 
		{
			if (!row[a,c]) { continue; }
			board[y,live_count] = c;
			live_count ++;
		}
	}

    
	public display() 
	{
		var output = new StringBuffer();
		var fl;
		for (var y=max_y; y>=-1; y--) 
		{
			if ((y==max_y) || (y==-1)) { fl=true; } else { fl=false; }
			if (fl) { output.append("\t+"); } else { output.append(y+"\t|"); }
			var r_base = output.length(0);
			for (var c=0; c<max_x; c++)
			{
				if (fl) { output.append("-"); } else { output.append(" "); }
			}
			if (fl) { output.append("+\n"); } else { output.append("|\n"); }
			if (fl) { continue; }
	    	    
			for (var c=1;c<=board[y,0] ;c++) 
			{
				var ov = r_base + board[y,c];
				if (ov>output.length(0)) 
				{
					Console::writeln("Bad "+y+" "+c+" "+ov);
				} 
				else 
				{
					output[ov] = '#';
				}
			}
		}    
		Console::writeln(output);
	}
    
	private do_row(y, top_row, mid_row, bot_row) 
	{
		var num_live = board[y,0];
		for (var c=1;c<=num_live ;c++) 
		{
			var x = board[y,c];
			update(x,top_row,mid_row,bot_row);
		}
		if (num_live==0) { return; }
	
		var top = y+1;
		var bot = y-1;
		if (top==max_y) { top=0; }
		if (bot==-1) { bot=max_y-1; }
		rowUsage[y]   += num_live;
		rowUsage[top] += num_live;
		rowUsage[bot] += num_live;
	}
    
	private change_board_row( y, score ) 
	{
		var usage = rowUsage[y];
		rowUsage[y] = 0;
		if (usage<3) 
		{
			//Console.WriteLine();
			if (usage>0) 
			{
				board[y,0] = 0;
				for (var c=0;c<score.length();c++) { score[c] = 0; }
			}
			return;
		}
		//System.out.print("Upd "+y+","+usage+"\t:");
		var insert_pos = 1;
		for (var c=0; c<score.length(0); c++) 
		{
			if (((1<<score[c]) & cell_live_set)>0) 
			{
				//System.out.print("["+score[c]+"]");
				board[y,insert_pos] = c;
				insert_pos ++;
			} 
			else 
			{
				//System.out.print("<"+score[c]+">");
			}
			score[c] = 0;
		}
		//Console.WriteLine();
		board[y,0] = insert_pos-1;
	}
    
	private update( x, top_row, mid_row, bot_row) 
	{
		if (x==0) 
		{
			update_point_three_m1(top_row,x);
			update_sides_m1(mid_row,x);
			update_point_three_m1(bot_row,x);
			return;
		}
		if (x==(max_x-1)) 
		{
			update_point_three_p1(top_row,x);
			update_sides_p1(mid_row,x);
			update_point_three_p1(bot_row,x);
			return;
		}
		update_point_three(top_row,x);
		update_sides(mid_row,x);
		update_point_three(bot_row,x);
	}
    
    
	private update_sides_m1( score_row, index) 
	{
		score_row[max_x-1] += 1;
		score_row[index-0] += LiveVal;
		score_row[index+1] += 1;
	}
	private update_sides( score_row, index) 
	{
		score_row[index-1] += 1;
		score_row[index-0] += LiveVal;
		score_row[index+1] += 1;
	}
	private update_sides_p1( score_row, index) 
	{
		score_row[index-1] += 1;
		score_row[index-0] += LiveVal;
		score_row[0      ] += 1;
	} 
    
	private update_point_three_m1( score_row, index) 
	{
		score_row[max_x-1] += 1;
		score_row[index-0] += 1;
		score_row[index+1] += 1;
	}
	private update_point_three( score_row, index) 
	{
		score_row[index-1] += 1;
		score_row[index-0] += 1;
		score_row[index+1] += 1;
	}
	private update_point_three_p1( score_row, index) 
	{
		score_row[index-1] += 1;
		score_row[index-0] += 1;
		score_row[0      ] += 1;
	}

	private init_arrays() 
	{
		board = new Array(max_y,max_x);
	
		rowOne  = new Array(max_x);
		rowZero = new Array(max_x);
		topRow  = new Array(max_x);
		midRow  = new Array(max_x);
		botRow  = new Array(max_x);
	
		rowUsage = new Array(max_y);
	}

	public calc_new() 
	{
		var tmp_row;

		do_row(0,rowOne,rowZero,topRow);
		do_row(max_y-1,rowZero,topRow,midRow);
		for (var y=max_y-2; y>2; y--) 
		{
			do_row(y,topRow,midRow,botRow);
			change_board_row(y+1,topRow);
	    
			tmp_row = topRow;
			topRow = midRow;
			midRow = botRow;
			botRow = tmp_row;
			for (var c=0;c<botRow.length(0);c++)
			{
				botRow[c] = 0;
			}
		}
		do_row(2,topRow,midRow,rowOne);
		change_board_row(3,topRow);
		do_row(1,midRow,rowOne,rowZero);
		change_board_row(2,midRow);
		change_board_row(1,rowOne);
		change_board_row(0,rowZero);
	}
    
	private calcRate(cycles_per_time, max_time) 
	{
		var big_counts = 0;
		var time_taken = 0;
		var now = DateTime::now();
		var was = now;
		while (time_taken <= max_time) 
		{
			big_counts ++;
			for (var i=0; i < cycles_per_time; i++) 
			{
				calc_new();
			}
			now = DateTime::now();
			time_taken = now.diffms(was);
		}
		var rate = (big_counts * cycles_per_time)/time_taken;
		Life2::rateFactor = max_x;
		return rate;
	}
    
	private calcPerformance( it_rates, is_first ) 
	{
		sortArray(it_rates);
		for (var rep = 0; rep < (rerunMainLoopCount-3); rep++) 
		{
			it_rates[1] += it_rates[rep+2];
		}
		it_rates[1] /= (rerunMainLoopCount-2);
		it_rates[2] = it_rates[rerunMainLoopCount-1];
	
		var outputs = new Array(3);
		for (var rep = 0; rep < 3; rep++) 
		{
			outputs[rep] = pretty_number(it_rates[rep]);
		}
		var output = "";
		for (var j = 2; j >= 0; j--) 
		{
			if (j != 2) 
			{
				output += "\t";
			}
			output += outputs[j];
		}
		if (!is_first)
		{ 
			Life2::java_bmark_list += ",";
		}
		Life2::java_bmark_list += outputs[1];
		Console::writeln(max_x + "\t" + output);
	}

	public Life2(size) 
	{
		max_x = size;
		max_y = size;
		init_arrays();    

		if (Life2::lightLoad) 
		{
			set_line(2,{0,1,2});
			set_line(1,{2});
			set_line(0,{1});
			return;
		}

		var block_width  = 5;
		var block_height = 5;
		var init = new Array(3,max_x);
		for (var x=0; x<=(max_x-block_width); x+= block_width) 
		{
			init[2,x+0] = init[2,x+1] = init[2,x+2] = true;
			init[1,x+2] = true;
			init[0,x+1]                = true;
		}
		for (var y=0; y<=(max_y-block_height); y+= block_height) 
		{
			set_line(y+2,init,2);
			set_line(y+1,init,1);
			set_line(y+0,init,0);
		}
	}
    
	public static main() 
	{
		//var try_arg = 0;
		//if (args.length(0) > try_arg) 
		//{
		//	if (args[try_arg] == "-heavy") 
		//	{
		//		lightLoad = false;
		//		try_arg ++;
		//	}
		//	if (args.Length > try_arg) 
		//	{
		//		wantedTime *= 10;
		//	}
		//}

		var it_rates = new Array(Life2::rerunMainLoopCount);

		if (Life2::lightLoad) 
		{
			Console::writeln("'Life' under light load");
			Life2::benchmarks = Life2::light_benchmarks;
		} 
		else 
		{
			Console::writeln("'Life' under heavy load");
			Life2::benchmarks = Life2::heavy_benchmarks;
		}
		if (Life2::useBenchmark) 
		{
			Console::writeln("Results are relative to baseline");
		} 
		else 
		{
			Console::writeln("Results are in raw format");
		}
		Console::writeln("Size\tbest\taverage\tworst");
	
		for (var c=0; c<Life2::use_Sizes.length(); c++) 
		{
			var life_ob = new Life2(Life2::use_Sizes[c]);
Console::writeln("main 1");
			var rate = life_ob.calcRate(1,20);
Console::writeln("main 2");
			var cycles = rate*Life2::wantedTime/10.0;
Console::writeln("main 3");
			rate = life_ob.calcRate(cycles,200);
Console::writeln("main 4");
			cycles = rate*Life2::wantedTime;
Console::writeln("main 5");
			for (var d=0; d<5; d++) 
			{
Console::writeln("main 6");
				rate = life_ob.calcRate(cycles,wantedTime*0.9);
Console::writeln("main 7");
				var check = rate*Life2::wantedTime;
Console::writeln("main 8");
				if (check > (cycles * 2)) 
				{
					Console::writeln("Adjusting "+cycles+" to "+check);
					cycles = check;
				}

				rate *= Life2::rateFactor;
				if (Life2::useBenchmark) 
				{
Console::writeln("main 9");
					it_rates[d] = 100d * rate / Life2::benchmarks[c];
				} 
				else 
				{
Console::writeln("main 10");
					it_rates[d] = rate;
				}
			}
			life_ob.calcPerformance(it_rates,(c==0));
		}
		Console::writeln("Averages: "+Life2::java_bmark_list);
		//try 
		//{
		//	StreamWriter dos = new StreamWriter( "life2cs.txt" );
		//	for (int c=0; c< Life2::use_Sizes.length(0); c++) 
		//	{
		//		dos.Write(Life2::use_Sizes[c].ToString() + ",");
		//	}
		//	dos.Write("\n" + Life2::java_bmark_list + "\n");
		//	dos.Close();
		//}
		//catch (IOException ioe)
		//{
		//	Console.WriteLine(ioe.ToString());
		//}
		//Console.WriteLine("\nhit any key ...");
		//Console.Read();
	}

}
